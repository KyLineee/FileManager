package client;

import DTO.*;
import Component.*;
import java.awt.BorderLayout;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Frame extends javax.swing.JFrame {

    private String currentPath = "";
    private String copiedFilePath = null;
    private FileManagerClient client;
    
    private DefaultTableModel tableModel;
    private java.util.List<FileInfo> fileList;
    
    private boolean sortByNameAscending = true;
    private boolean sortBySizeAscending = true;
    private boolean sortByTypeAscending = true;
    private boolean sortByDateAscending = true;
    
    private BreadcrumbPanel breadcrumbPanel;    

    
    /**
     * Creates new form Frame
     */
    public Frame() {
        initComponents();
    }
    
    public Frame(FileManagerClient client) {
        this.client = client;
        initComponents();
        initTable();
        refreshFileList();
        initBreadcrumbPanel();
    }
    
    private void initTable() {
        String[] columnNames = {"Имя", "Дата изменения", "Тип", "Размер"};
        tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // запрет редактирования ячеек
            }
        };
        jTableFiles.setModel(tableModel);
    }
    
    private void initBreadcrumbPanel() {
        breadcrumbPanel = new BreadcrumbPanel(new BreadcrumbPanel.BreadcrumbListener() {
            @Override
            public void onBreadcrumbClicked(String path) {
                currentPath = path;
                refreshFileList();
                breadcrumbPanel.updateBreadcrumb(currentPath);
            }
        });

        jPanelBreadcrumb.setLayout(new BorderLayout());
        jPanelBreadcrumb.removeAll();
        jPanelBreadcrumb.add(breadcrumbPanel, BorderLayout.CENTER);
        jPanelBreadcrumb.revalidate();
        jPanelBreadcrumb.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenu1 = new javax.swing.JMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        popupMenu1 = new java.awt.PopupMenu();
        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        menuBar2 = new java.awt.MenuBar();
        menu3 = new java.awt.Menu();
        menu4 = new java.awt.Menu();
        popupMenu2 = new java.awt.PopupMenu();
        jPopupMenu3 = new javax.swing.JPopupMenu();
        jPopupMenu4 = new javax.swing.JPopupMenu();
        jPopupMenu5 = new javax.swing.JPopupMenu();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenuBar4 = new javax.swing.JMenuBar();
        jMenu9 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        jMenu11 = new javax.swing.JMenu();
        jMenuBar5 = new javax.swing.JMenuBar();
        jMenu12 = new javax.swing.JMenu();
        jMenu13 = new javax.swing.JMenu();
        jPopupMenu6 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jMenuItem3 = new javax.swing.JMenuItem();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jTextFieldSearch = new javax.swing.JTextField();
        jButtonBack = new javax.swing.JButton();
        jButtonSearch = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableFiles = new javax.swing.JTable();
        jPanelBreadcrumb = new javax.swing.JPanel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuSort = new javax.swing.JMenu();
        jMenuSortName = new javax.swing.JMenuItem();
        jMenuSortSize = new javax.swing.JMenuItem();
        jMenuSortType = new javax.swing.JMenuItem();
        jMenuSortDate = new javax.swing.JMenuItem();
        jMenuView = new javax.swing.JMenu();
        jMenuViewTable = new javax.swing.JMenuItem();
        jMenuViewList = new javax.swing.JMenuItem();
        jMenuUpload = new javax.swing.JMenu();
        jMenuDownload = new javax.swing.JMenu();
        jMenuDelete = new javax.swing.JMenu();
        jMenuCreateFolder = new javax.swing.JMenu();
        jMenuRename = new javax.swing.JMenu();
        jMenuCopy = new javax.swing.JMenu();
        jMenuInsert = new javax.swing.JMenu();
        jMenuRefresh = new javax.swing.JMenu();

        jMenu1.setText("jMenu1");

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        popupMenu1.setLabel("popupMenu1");

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        menu3.setLabel("File");
        menuBar2.add(menu3);

        menu4.setLabel("Edit");
        menuBar2.add(menu4);

        popupMenu2.setLabel("popupMenu2");

        jMenu2.setText("File");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar1.add(jMenu3);

        jMenu6.setText("File");
        jMenuBar3.add(jMenu6);

        jMenu7.setText("Edit");
        jMenuBar3.add(jMenu7);

        jMenu8.setText("jMenu8");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jMenu9.setText("File");
        jMenuBar4.add(jMenu9);

        jMenu10.setText("Edit");
        jMenuBar4.add(jMenu10);

        jMenu11.setText("jMenu11");

        jMenu12.setText("File");
        jMenuBar5.add(jMenu12);

        jMenu13.setText("Edit");
        jMenuBar5.add(jMenu13);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jScrollPane1.setViewportView(jEditorPane1);

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextFieldSearch.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButtonBack.setText("Назад");
        jButtonBack.setMaximumSize(new java.awt.Dimension(72, 25));
        jButtonBack.setMinimumSize(new java.awt.Dimension(72, 25));
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jButtonSearch.setText("Поиск");
        jButtonSearch.setMaximumSize(new java.awt.Dimension(72, 25));
        jButtonSearch.setMinimumSize(new java.awt.Dimension(72, 25));
        jButtonSearch.setName(""); // NOI18N
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jTableFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Имя", "Дата изменения", "Размер", "Тип"
            }
        ));
        jTableFiles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableFilesMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableFiles);

        jPanelBreadcrumb.setBackground(new java.awt.Color(255, 255, 255));
        jPanelBreadcrumb.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanelBreadcrumbLayout = new javax.swing.GroupLayout(jPanelBreadcrumb);
        jPanelBreadcrumb.setLayout(jPanelBreadcrumbLayout);
        jPanelBreadcrumbLayout.setHorizontalGroup(
            jPanelBreadcrumbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelBreadcrumbLayout.setVerticalGroup(
            jPanelBreadcrumbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        jMenuBar.setBorderPainted(false);
        jMenuBar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenuBar.setFont(jMenuBar.getFont());
        jMenuBar.setMinimumSize(new java.awt.Dimension(400, 50));
        jMenuBar.setPreferredSize(new java.awt.Dimension(400, 35));

        jMenuSort.setText("Сортировать");

        jMenuSortName.setText("Названию");
        jMenuSortName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSortNameActionPerformed(evt);
            }
        });
        jMenuSort.add(jMenuSortName);

        jMenuSortSize.setText("Размеру");
        jMenuSortSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSortSizeActionPerformed(evt);
            }
        });
        jMenuSort.add(jMenuSortSize);

        jMenuSortType.setText("Типу");
        jMenuSortType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSortTypeActionPerformed(evt);
            }
        });
        jMenuSort.add(jMenuSortType);

        jMenuSortDate.setText("Дате изменения");
        jMenuSortDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSortDateActionPerformed(evt);
            }
        });
        jMenuSort.add(jMenuSortDate);

        jMenuBar.add(jMenuSort);

        jMenuView.setText("Вид");

        jMenuViewTable.setText("Таблица");
        jMenuViewTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuViewTableActionPerformed(evt);
            }
        });
        jMenuView.add(jMenuViewTable);

        jMenuViewList.setText("Список");
        jMenuViewList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuViewListActionPerformed(evt);
            }
        });
        jMenuView.add(jMenuViewList);

        jMenuBar.add(jMenuView);

        jMenuUpload.setText("Загрузить");
        jMenuUpload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuUploadMouseClicked(evt);
            }
        });
        jMenuBar.add(jMenuUpload);

        jMenuDownload.setText("Скачать");
        jMenuDownload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuDownloadMouseClicked(evt);
            }
        });
        jMenuBar.add(jMenuDownload);

        jMenuDelete.setText("Удалить");
        jMenuDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuDeleteMouseClicked(evt);
            }
        });
        jMenuBar.add(jMenuDelete);

        jMenuCreateFolder.setText("Создать папку");
        jMenuCreateFolder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuCreateFolderMouseClicked(evt);
            }
        });
        jMenuBar.add(jMenuCreateFolder);

        jMenuRename.setText("Переименовать");
        jMenuRename.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuRenameMouseClicked(evt);
            }
        });
        jMenuBar.add(jMenuRename);

        jMenuCopy.setText("Копировать");
        jMenuCopy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuCopyMouseClicked(evt);
            }
        });
        jMenuBar.add(jMenuCopy);

        jMenuInsert.setText("Вставить");
        jMenuInsert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuInsertMouseClicked(evt);
            }
        });
        jMenuBar.add(jMenuInsert);

        jMenuRefresh.setText("Обновить");
        jMenuRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuRefreshMouseClicked(evt);
            }
        });
        jMenuBar.add(jMenuRefresh);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelBreadcrumb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1087, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelBreadcrumb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuSortNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSortNameActionPerformed
        // TODO add your handling code here:
        sortByNameAscending = !sortByNameAscending;
        sortFiles("name", sortByNameAscending);
    }//GEN-LAST:event_jMenuSortNameActionPerformed

    private void jMenuSortSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSortSizeActionPerformed
        // TODO add your handling code here:
        sortBySizeAscending = !sortBySizeAscending;
        sortFiles("size", sortBySizeAscending);
    }//GEN-LAST:event_jMenuSortSizeActionPerformed

    private void jMenuSortDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSortDateActionPerformed
        // TODO add your handling code here:
        sortByDateAscending = !sortByDateAscending;
        sortFiles("date", sortByDateAscending);
    }//GEN-LAST:event_jMenuSortDateActionPerformed

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        // TODO add your handling code here:
        if (!currentPath.isEmpty()) {
            int sepIndex = currentPath.lastIndexOf(File.separator);
            if (sepIndex == -1)
                currentPath = "";
            else
                currentPath = currentPath.substring(0, sepIndex);
            refreshFileList();
            breadcrumbPanel.updateBreadcrumb(currentPath);
        } 
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jMenuUploadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuUploadMouseClicked
        // TODO add your handling code here:
        uploadFile();
    }//GEN-LAST:event_jMenuUploadMouseClicked

    private void jMenuDownloadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuDownloadMouseClicked
        // TODO add your handling code here:
        downloadFile();
    }//GEN-LAST:event_jMenuDownloadMouseClicked

    private void jMenuDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuDeleteMouseClicked
        // TODO add your handling code here:
        deleteItem();
    }//GEN-LAST:event_jMenuDeleteMouseClicked

    private void jMenuCreateFolderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuCreateFolderMouseClicked
        // TODO add your handling code here:
        createFolder();
    }//GEN-LAST:event_jMenuCreateFolderMouseClicked

    private void jMenuRenameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuRenameMouseClicked
        // TODO add your handling code here:
        renameItem();
    }//GEN-LAST:event_jMenuRenameMouseClicked

    private void jMenuCopyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuCopyMouseClicked
        // TODO add your handling code here:
        copyItem();
    }//GEN-LAST:event_jMenuCopyMouseClicked

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        // TODO add your handling code here:
        String query = jTextFieldSearch.getText().trim();
        List<FileInfo> results = client.search(query);
        if (results != null) {
            fileList = results;
            updateTableModel(results);
        } else {
            JOptionPane.showMessageDialog(this, "Поиск не дал результатов");
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jMenuInsertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuInsertMouseClicked
        // TODO add your handling code here:
        insertCopiedItem();
    }//GEN-LAST:event_jMenuInsertMouseClicked
    
    private void jMenuSortTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSortTypeActionPerformed
        // TODO add your handling code here:
        sortByTypeAscending = !sortByTypeAscending;
        sortFiles("type", sortByNameAscending);
    }//GEN-LAST:event_jMenuSortTypeActionPerformed

    private void jTableFilesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableFilesMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            int selectedRow = jTableFiles.getSelectedRow();
            if (selectedRow >= 0) {
                String selectedItem = (String) tableModel.getValueAt(selectedRow, 0);
                if (selectedItem != null) {
                    String newPath = currentPath.isEmpty() ? selectedItem : currentPath + File.separator + selectedItem;
                    List<FileInfo> folderContents = client.listFolder(newPath);
                    if (folderContents != null) {
                        currentPath = newPath;
                        refreshFileList();
                        breadcrumbPanel.updateBreadcrumb(currentPath);
                    } else {
                        JOptionPane.showMessageDialog(Frame.this, "Это не папка или произошла ошибка");
                    }
                }
            }
        }
    }//GEN-LAST:event_jTableFilesMouseClicked

    private void jMenuViewListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuViewListActionPerformed
        // TODO add your handling code here:
        setListView(true);
    }//GEN-LAST:event_jMenuViewListActionPerformed

    private void jMenuViewTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuViewTableActionPerformed
        // TODO add your handling code here:
        setListView(false);
    }//GEN-LAST:event_jMenuViewTableActionPerformed

    private void jMenuRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuRefreshMouseClicked
        // TODO add your handling code here:
        refreshFileList();
        breadcrumbPanel.updateBreadcrumb(currentPath);
    }//GEN-LAST:event_jMenuRefreshMouseClicked
    
    // Переключение вида отображения
    private void setListView(boolean listView) {
        if (listView) {
            jTableFiles.getColumnModel().getColumn(1).setMinWidth(0);
            jTableFiles.getColumnModel().getColumn(1).setMaxWidth(0);
            jTableFiles.getColumnModel().getColumn(2).setMinWidth(0);
            jTableFiles.getColumnModel().getColumn(2).setMaxWidth(0);
            jTableFiles.getColumnModel().getColumn(3).setMinWidth(0);
            jTableFiles.getColumnModel().getColumn(3).setMaxWidth(0);
        } else {
            jTableFiles.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
             for (int i = 0; i < jTableFiles.getColumnCount(); i++) {
                javax.swing.table.TableColumn column = jTableFiles.getColumnModel().getColumn(i);
                column.setMinWidth(15);
                column.setMaxWidth(Integer.MAX_VALUE);
                column.setPreferredWidth(jTableFiles.getWidth() / jTableFiles.getColumnCount());
            }
            jTableFiles.doLayout();
        }
    }
    
    private void sortFiles(String criterion, boolean ascending) {
        if (fileList == null) return;

        Comparator<FileInfo> comparator;
        switch (criterion) {
            case "name":
                comparator = Comparator.comparing(FileInfo::getName, String.CASE_INSENSITIVE_ORDER);
                break;
            case "size":
                comparator = Comparator.comparingLong(FileInfo::getSize);
                break;
            case "date":
                comparator = Comparator.comparingLong(FileInfo::getLastModified);
                break;
            case "type":
                comparator = Comparator.comparing(FileInfo::getFileType, String.CASE_INSENSITIVE_ORDER);
                break;
            default:
                comparator = Comparator.comparing(FileInfo::getName, String.CASE_INSENSITIVE_ORDER);
        }

        if (!ascending) {
            comparator = comparator.reversed();
        }

        Collections.sort(fileList, comparator);
        updateTableModel(fileList);
    }
    
    private String formatFileSize(long size) {
        if (size < 1024) {
            return size + " Б";
        } else if (size < 1024 * 1024) {
            double kb = size / 1024.0;
            return String.format("%.1f КБ", kb);
        } else if (size < 1024L * 1024 * 1024) {
            double mb = size / (1024.0 * 1024);
            return String.format("%.1f МБ", mb);
        } else {
            double gb = size / (1024.0 * 1024 * 1024);
            return String.format("%.1f Г", gb);
        }
    }
    
    private void updateTableModel(List<FileInfo> files) {
        tableModel.setRowCount(0);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        for (FileInfo f : files) {
            String name = f.getName();
            String lastMod = sdf.format(new Date(f.getLastModified()));
            String size = "";
            if (!f.getFileType().equalsIgnoreCase("Папка")) {
                size = formatFileSize(f.getSize());
            }
            String type = f.getFileType();
            tableModel.addRow(new Object[]{name, lastMod, type, size});
        }
    }
    
    private void refreshFileList() {
        List<FileInfo> files;
        if (currentPath.isEmpty()) {
            files = client.listFolder("");
        } else {
            files = client.listFolder(currentPath);
        }
        if (files != null) {
            fileList = files;
            updateTableModel(files);
        }
    }
    
    private void uploadFile() {
        JFileChooser fc = new JFileChooser();
        int res = fc.showOpenDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String destPath = file.getName();
            String relativeDest = currentPath.isEmpty() ? destPath : currentPath + File.separator + destPath;
            if (client.uploadFile(file, relativeDest)) {
                refreshFileList();
            } else {
                JOptionPane.showMessageDialog(this, "Ошибка загрузки");
            }
        }
    }
    
    private void downloadFile() {
        int selectedRow = jTableFiles.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Выберите файл для скачивания", "Скачивание", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        String fileName = (String) tableModel.getValueAt(selectedRow, 0);
        String relativePath = currentPath.isEmpty() ? fileName : currentPath + File.separator + fileName;
        JFileChooser fc = new JFileChooser();
        fc.setSelectedFile(new File(fileName));
        int res = fc.showSaveDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) {
            File saveTo = fc.getSelectedFile();
            if (client.downloadFile(relativePath, saveTo)) {
                JOptionPane.showMessageDialog(this, "Файл успешно скачан", "Скачивание", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Не удалось загрузить файл", "Скачивание", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void createFolder() {
        String folderName = JOptionPane.showInputDialog(
            this,
            "Введите название папки:",
            "Создание папки",
            JOptionPane.PLAIN_MESSAGE);
        if (folderName != null && !folderName.trim().isEmpty()) {
            String relativePath = currentPath.isEmpty() ? folderName : currentPath + File.separator + folderName;
            if (client.createFolder(relativePath)) {
                refreshFileList();
            } else {
                JOptionPane.showMessageDialog(this, "Не удалось создать папку", "Создание папки", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void deleteItem() {
        int selectedRow = jTableFiles.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Выберите элемент для удаления", "Удаление", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        String fileName = (String) tableModel.getValueAt(selectedRow, 0);
        String relativePath = currentPath.isEmpty() ? fileName : currentPath + File.separator + fileName;
        int confirm = JOptionPane.showOptionDialog(
            this,
            "Вы действительно хотите удалить: " + fileName + "?",
            "Подтверждение удаления",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,          
            new Object[] { "Да", "Нет" },      
            null);  
        if (confirm == JOptionPane.YES_OPTION) {
            if (client.delete(relativePath)) {
                refreshFileList();
            } else {
                JOptionPane.showMessageDialog(this, "Выберите элемент для удаления", "Удаление", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
    
    private void copyItem() {
        int selectedRow = jTableFiles.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Выберите элемент для копирования", "Копирование", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        String fileName = (String) tableModel.getValueAt(selectedRow, 0);
        copiedFilePath = currentPath.isEmpty() ? fileName : currentPath + File.separator + fileName;
    }
    
    private void insertCopiedItem() {
        if (copiedFilePath == null) {
            JOptionPane.showMessageDialog(this,
                "Ни один файл не был скопирован. Пожалуйста, сначала нажмите «Копировать».", "Вставка", JOptionPane.WARNING_MESSAGE);
            return;
        }
        File f = new File(copiedFilePath);
        String fileName = f.getName();
        String destination = currentPath.isEmpty() ? fileName : currentPath + File.separator + fileName;
        if (client.copy(copiedFilePath, destination)) {
            refreshFileList();
        } else {
            JOptionPane.showMessageDialog(this, "Копирование не удалось", "Вставка", JOptionPane.ERROR_MESSAGE);
        }
        copiedFilePath = null;
    }
    
    private void renameItem() {
        int selectedRow = jTableFiles.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Выберите элемент для переименования", "Переименование", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        String oldName = (String) tableModel.getValueAt(selectedRow, 0);
        String newName = (String) JOptionPane.showInputDialog(
            this,                    
            "Введите новое имя:",     
            "Переименование",        
            JOptionPane.PLAIN_MESSAGE,
            null,                  
            null,                     
            oldName                 
        );

        if (newName != null && !newName.trim().isEmpty()) {
            String relativePath = currentPath.isEmpty() ? oldName : currentPath + File.separator + oldName;
            if (client.rename(relativePath, newName)) {
                refreshFileList();
            } else {
                JOptionPane.showMessageDialog(this, "Переименование не удалось", "Переименование", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Frame frame = new Frame();
                frame.setTitle("Файловый менеджер");
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu13;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuBar jMenuBar4;
    private javax.swing.JMenuBar jMenuBar5;
    private javax.swing.JMenu jMenuCopy;
    private javax.swing.JMenu jMenuCreateFolder;
    private javax.swing.JMenu jMenuDelete;
    private javax.swing.JMenu jMenuDownload;
    private javax.swing.JMenu jMenuInsert;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenu jMenuRefresh;
    private javax.swing.JMenu jMenuRename;
    private javax.swing.JMenu jMenuSort;
    private javax.swing.JMenuItem jMenuSortDate;
    private javax.swing.JMenuItem jMenuSortName;
    private javax.swing.JMenuItem jMenuSortSize;
    private javax.swing.JMenuItem jMenuSortType;
    private javax.swing.JMenu jMenuUpload;
    private javax.swing.JMenu jMenuView;
    private javax.swing.JMenuItem jMenuViewList;
    private javax.swing.JMenuItem jMenuViewTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelBreadcrumb;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JPopupMenu jPopupMenu3;
    private javax.swing.JPopupMenu jPopupMenu4;
    private javax.swing.JPopupMenu jPopupMenu5;
    private javax.swing.JPopupMenu jPopupMenu6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableFiles;
    private javax.swing.JTextField jTextFieldSearch;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.Menu menu3;
    private java.awt.Menu menu4;
    private java.awt.MenuBar menuBar1;
    private java.awt.MenuBar menuBar2;
    private java.awt.PopupMenu popupMenu1;
    private java.awt.PopupMenu popupMenu2;
    // End of variables declaration//GEN-END:variables
}